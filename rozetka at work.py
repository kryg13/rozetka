from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import NoSuchElementException, WebDriverException
import time
import csv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó Rozetka
categories = {
    "–¢–µ–ª–µ—Ñ–æ–Ω–∏": "https://rozetka.com.ua/ua/mobile-phones/c80003/",
    "–¢–µ–ª–µ–≤—ñ–∑–æ—Ä–∏": "https://rozetka.com.ua/ua/televisions/c80037/",
    "–ü–∏–ª–æ—Å–æ—Å–∏": "https://rozetka.com.ua/ua/vacuum-cleaners/c80125/",
    "–î–∏—Ç—è—á—ñ —ñ–≥—Ä–∞—à–∫–∏": "https://rozetka.com.ua/ua/toys/c83849/"
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Selenium
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
all_reviews = []

def check_page_accessible(url):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    try:
        time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
        driver.get(url)
        return True
    except WebDriverException as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ {url}: {e}")
        return False

def get_product_links(category_url, max_products=1000):
    """–ó–±–∏—Ä–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    if not check_page_accessible(category_url):
        logger.error(f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category_url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return []

    product_links = set()
    while len(product_links) < max_products:
        time.sleep(2)
        elements = driver.find_elements(By.CSS_SELECTOR, "a.tile-title")
        for el in elements:
            link = el.get_attribute("href")
            if link and "/p" in link:
                product_links.add(link.split('?')[0])
        try:
            next_btn = driver.find_element(By.CSS_SELECTOR, "a.pagination__direction--forward")
            next_btn.click()
        except NoSuchElementException:
            logger.info(f"–ë—ñ–ª—å—à–µ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è {category_url} –Ω–µ–º–∞—î")
            break
        except WebDriverException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É {category_url}: {e}")
            break
    return list(product_links)[:max_products]

def get_reviews(product_url, max_reviews=50):
    """–ó–±–∏—Ä–∞—î –≤—ñ–¥–≥—É–∫–∏ –∑ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É"""
    reviews = []
    url = product_url.rstrip("/") + "/comments/"
    try:
        if not check_page_accessible(url):
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ {url}")
            return reviews
        time.sleep(5)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —è–∫ —É –≤–∞—à–æ–º—É –∫–æ–¥—ñ
        
        # –ö–ª—ñ–∫–∞—î–º–æ "–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ", –ø–æ–∫–∏ —î
        while True:
            try:
                show_more_button = driver.find_element(By.XPATH, '//button[contains(text(), "–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ")]')
                driver.execute_script("arguments[0].click();", show_more_button)
                time.sleep(2)
            except NoSuchElementException:
                break

        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        review_elements = driver.find_elements(By.CLASS_NAME, "comment__text")
        for el in review_elements:
            text = el.text.strip()
            if text and len(reviews) < max_reviews:
                reviews.append(text)

        # –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—Ä–µ–Ω–¥—ñ–≤
        reply_elements = driver.find_elements(By.CLASS_NAME, "reply__body")
        for el in reply_elements:
            text = el.text.strip()
            if text and len(reviews) < max_reviews:
                reviews.append("üîÅ " + text)
                
    except WebDriverException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è {url}: {e}")
    return reviews[:max_reviews]

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
for category_name, category_url in categories.items():
    logger.info(f"\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_name}")
    product_links = get_product_links(category_url, max_products=300)

    for product_url in product_links:
        logger.info(f"  ‚Üí –í–∏—Ç—è–≥—É—é –≤—ñ–¥–≥—É–∫–∏: {product_url}/comments/")
        reviews = get_reviews(product_url, max_reviews=50)
        logger.info(f"     –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–≥—É–∫—ñ–≤: {len(reviews)}")

        for review in reviews:
            all_reviews.append([category_name, product_url, review])
        time.sleep(2)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        if len(all_reviews) >= 10000:
            break
    if len(all_reviews) >= 10000:
        break

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
output_file = "rozetka_reviews.csv"
with open(output_file, mode="w", encoding="utf-8-sig", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "URL —Ç–æ–≤–∞—Ä—É", "–í—ñ–¥–≥—É–∫"])
    writer.writerows(all_reviews)

logger.info(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ó—ñ–±—Ä–∞–Ω–æ {len(all_reviews)} –≤—ñ–¥–≥—É–∫—ñ–≤. –ó–±–µ—Ä–µ–∂–µ–Ω–æ —É: {output_file}")
driver.quit()